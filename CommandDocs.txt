				-- Ex-Alta 2 Ground Station Commands --
Note: arguments and return types are given as numpy types


TIME_MANAGEMENT.GET_TIME:
		About: None
		Arguments: [None]
		return values: {'err': '>b', 'timestamp': '>u4'}
		port: 8		subport: 0


TIME_MANAGEMENT.SET_TIME:
		About: None
		Arguments: [>u4]
		return values: {'err': '>b'}
		port: 8		subport: 1


TIME_MANAGEMENT.GET_LAST_PPS_TIME:
		About: Get last PPS time (EPS)
		Arguments: [None]
		return values: {'err': '>b', 'timestampInS': '>u4', 'secondFraction': '>u4'}
		port: 8		subport: 2


TIME_MANAGEMENT.GET_PRECISE_TIME:
		About: A command to get precise time (NTP-like format)
		Arguments: [>B, >u4, >u4, >u4, >u4, >u4, >u4, >u4, >u4]
		return values: {'err': '>B', 'requestTimeInS': '>u4', 'requestSecondFraction': '>u4', 'receiveTimeInS': '>u4', 'receiveSecondFraction': '>u4', 'transmitTimeInS': '>u4', 'transmitSecondFraction': '>u4', 'receptionTimeInS': '>u4', 'receptionSecondFraction': '>u4'}
		port: 8		subport: 3


COMMUNICATION.S_GET_FREQ:
		About: Gets the S-band frequency (MHz)
		Arguments: [None]
		return values: {'err': '>b', 'frequency': '>f'}
		port: 10		subport: 1


COMMUNICATION.S_GET_CONTROL:
		About: Gets the S-band`s power amplifier write status and its mode = {0:configuration, 1: synchronization, 2:data, 3:test data}
		Arguments: [None]
		return values: {'err': '>b', 'status': '>u1', 'mode': '>u1'}
		port: 10		subport: 2


COMMUNICATION.S_GET_ENCODER:
		About: Gets the S-band encoding configuration. mod={0:QPSK, 1:OQPSK}, rate={0:half, 1:full}
rguments: [None]
		return values: {'err': '>b', 'scrambler': '>u1', 'filter': '>u1', 'modulation': '>u1', 'rate': '>u1'}
		port: 10		subport: 3

er
		Arguments: [None]
		return values: {'err': '>b', 'Power Amplifier Power': '>u1'}
		port: 10		subport: 4


COMMUNICATION.S_GET_STATUS:
		About: Checks if the power of S-band power aamplifier is good and if the frequency lock is achieved
guments: [None]
		return values: {'err': '>b', 'PWRGD': '>u1', 'TXL': '>u1'}
		port: 10		subport: 5



		Arguments: [None]
		return values: {'err': '>b', 'Transmit Ready': '>i4'}
		port: 10		subport: 6


		Arguments: [>B]
		return values: {'err': '>b', 'pointer': '>u2'}
		port: 10		subport: 7



		Arguments: [None]
		return values: {'err': '>b', 'Output Power': '>f', 'Power Amplifier Temperature': '>f', 'Top Temperature': '>f', 'Bottom Temperature': '>f', 'Battery Current': '>f', 'Battery Voltage': '>f', 'Power Amplifier Current': '>f', 'Power Amplifier Voltage': '>f'}
		port: 10		subport: 8

t
		Arguments: [None]
		return values: {'err': '>b'}
		port: 10		subport: 9


COMMUNICATION.S_GET_FULL_STATUS:
		About: A full status of S-band non-configurable parametersguments: [None]
		return values: {'err': '>b', 'PWRGD': '>u1', 'TXL': '>u1', 'Transmit Ready': '>i4', 'Buffer Count': '>u2', 'Buffer Underrun': '>u2', 'Buffer Overrun': '>u2', 'Output Power': '>f', 'Power Amplifier Temperature': '>f', 'Top Temperature': '>f', 'Bottom Temperature': '>f', 'Battery Current': '>f', 'Battery Voltage': '>f', 'Power Amplifier Current': '>f', 'Power Amplifier Voltage': '>f', 'Firmware Version': '>f'}
		port: 10		subport: 10


		Arguments: [>f]
		return values: {'err': '>b'}
		port: 10		subport: 11


COMMUNICATION.S_SET_CONTROL:
		About: Sets the S-band`s power amplifier write status and its mode = {0:config, 1: synch, 2:data, 3:test data}. Input: 2 binary
guments: [>u1, >u1]
		return values: {'err': '>b'}
		port: 10		subport: 12



		Arguments: [>u1, >u1, >u1, >u1]
		return values: {'err': '>b'}
		port: 10		subport: 13


		Arguments: [>u1]
		return values: {'err': '>b'}
		port: 10		subport: 14



		Arguments: [None]
		return values: {'err': '>b', 'Frequency': '>f', 'Power Amplifier Power': '>u1', 'Power Amplifier status': '>u1', 'Power Amplifier mode': '>u1', 'Encoder scrambler': '>u1', 'Encoder filter': '>u1', 'Encoder modulation': '>u1', 'Encoder rate': '>u1'}
		port: 10		subport: 15


COMMUNICATION.S_SET_CONFIG:
		About: Sets all the 8 S-band configurable parameters (freq PA_power PA_status PA_mode Enc_scrambler Enc_filter Enc_mod Enc_rate)
		Arguments: [>f, >u1, >u1, >u1, >u1, >u1, >u1, >u1]
		return values: {'err': '>b'}
		port: 10		subport: 16



HOUSEKEEPING.PARAMETER_REPORT:
		About: None
		Arguments: [>B]
		return values: {'structureID': '>B', 'temp': '>f4'}
		port: 9		subport: 0


GROUND_STATION_WDT.RESET_WDT:
		About: None
		Arguments: [>u2]
		return values: {'err': '>B'}
		port: 16		subport: 0


GROUND_STATION_WDT.GET_WDT_REMAINING:
		About: None
		Arguments: [None]
		return values: {'err': '>B', 'timeLeftInS': '>u4'}
		port: 16		subport: 1


GROUND_STATION_WDT.EPS_HARD_RESET:
		About: None
		Arguments: [>u2]
		return values: {'err': '>b'}
		port: 16		subport: 2


GROUND_STATION_WDT.PAUSE_EPS_DEPLOYMENT_ACTION:
		About: None
		Arguments: [>B, >u4]
		return values: {'err': '>b'}
		port: 16		subport: 8


CLI.GENERAL_TELEMETERY:
		About: None
		Arguments: [None]
		return values: {'err': '>b', 'timestamp': '>u4', 'uptimeInS': '>f8', 'gs_wdt_time_left_s': '>u4', 'counter_wdt_gs': '>u4', 'mpptConverterVoltage0_mV': '>u2', 'mpptConverterVoltage1_mV': '>u2', 'mpptConverterVoltage2_mV': '>u2', 'mpptConverterVoltage3_mV': '>u2', 'curSolarPanels0_mA': '>u2', 'curSolarPanels1_mA': '>u2', 'curSolarPanels2_mA': '>u2', 'curSolarPanels3_mA': '>u2', 'curSolarPanels4_mA': '>u2', 'curSolarPanels5_mA': '>u2', 'curSolarPanels6_mA': '>u2', 'curSolarPanels7_mA': '>u2', 'vBatt_mV': '>u2', 'curSolar_mA': '>u2', 'curBattIn_mA': '>u2', 'curBattOut_mA': '>u2', 'curOutput0_mA': '>u2', 'curOutput1_mA': '>u2', 'curOutput2_mA': '>u2', 'curOutput3_mA': '>u2', 'curOutput4_mA': '>u2', 'curOutput5_mA': '>u2', 'curOutput6_mA': '>u2', 'curOutput7_mA': '>u2', 'curOutput8_mA': '>u2', 'curOutput9_mA': '>u2', 'curOutput10_mA': '>u2', 'curOutput11_mA': '>u2', 'curOutput12_mA': '>u2', 'curOutput13_mA': '>u2', 'curOutput14_mA': '>u2', 'curOutput15_mA': '>u2', 'curOutput16_mA': '>u2', 'curOutput17_mA': '>u2', 'AOcurOutput0_mA': '>u2', 'AOcurOutput1_mA': '>u2', 'outputConverterVoltage0': '>u2', 'outputConverterVoltage1': '>u2', 'outputConverterVoltage2': '>u2', 'outputConverterVoltage3': '>u2', 'outputConverterVoltage4': '>u2', 'outputConverterVoltage5': '>u2', 'outputConverterVoltage6': '>u2', 'outputConverterVoltage7': '>u2', 'outputConverterState': '>B', 'outputStatus': '>u4', 'outputFaultStatus': '>u4', 'outputOnDelta0': '>u2', 'outputOnDelta1': '>u2', 'outputOnDelta2': '>u2', 'outputOnDelta3': '>u2', 'outputOnDelta4': '>u2', 'outputOnDelta5': '>u2', 'outputOnDelta6': '>u2', 'outputOnDelta7': '>u2', 'outputOnDelta8': '>u2', 'outputOnDelta9': '>u2', 'outputOnDelta10': '>u2', 'outputOnDelta11': '>u2', 'outputOnDelta12': '>u2', 'outputOnDelta13': '>u2', 'outputOnDelta14': '>u2', 'outputOnDelta15': '>u2', 'outputOnDelta16': '>u2', 'outputOnDelta17': '>u2', 'outputOffDelta0': '>u2', 'outputOffDelta1': '>u2', 'outputOffDelta2': '>u2', 'outputOffDelta3': '>u2', 'outputOffDelta4': '>u2', 'outputOffDelta5': '>u2', 'outputOffDelta6': '>u2', 'outputOffDelta7': '>u2', 'outputOffDelta8': '>u2', 'outputOffDelta9': '>u2', 'outputOffDelta10': '>u2', 'outputOffDelta11': '>u2', 'outputOffDelta12': '>u2', 'outputOffDelta13': '>u2', 'outputOffDelta14': '>u2', 'outputOffDelta15': '>u2', 'outputOffDelta16': '>u2', 'outputOffDelta17': '>u2', 'outputFaultCount0': '>u2', 'outputFaultCount1': '>u2', 'outputFaultCount2': '>u2', 'outputFaultCount3': '>u2', 'outputFaultCount4': '>u2', 'outputFaultCount5': '>u2', 'outputFaultCount6': '>u2', 'outputFaultCount7': '>u2', 'outputFaultCount8': '>u2', 'outputFaultCount9': '>u2', 'outputFaultCount10': '>u2', 'outputFaultCount11': '>u2', 'outputFaultCount12': '>u2', 'outputFaultCount13': '>u2', 'outputFaultCount14': '>u2', 'outputFaultCount15': '>u2', 'outputFaultCount16': '>u2', 'outputFaultCount17': '>u2', 'temp0_c': '>b', 'temp1_c': '>b', 'temp2_c': '>b', 'temp3_c': '>b', 'temp4_c': '>b', 'temp5_c': '>b', 'temp6_c': '>b', 'temp7_c': '>b', 'temp8_c': '>b', 'temp9_c': '>b', 'temp10_c': '>b', 'temp11_c': '>b', 'temp12_c': '>b', 'temp13_c': '>b', 'battState': '>B', 'mpptMode': '>B', 'battHeaterMode': '>B', 'battHeaterState': '>B'}
		port: 13		subport: 0


CLI.SET_TELEMETERY_PERIOD:
		About: Set telemetery collection period on EPS
		Arguments: [>u4, >B, >u4, >u4]
		return values: {'err': '>b'}
		port: 13		subport: 255


CONTROL. POWER OUTPUTS SINGLE_OUTPUT_CONTROL:
		About: None
		Arguments: [>B, >B, >u2]
		return values: {'err': '>b'}
		port: 14		subport: 0


CONTROL.ALL_OUTPUT_CONTROL:
		About: None
		Arguments: [>u4]
		return values: {'err': '>b'}
		port: 14		subport: 1


CONTROL. SOLAR PANEL INPUTS & MPPT SET_SINGLE_MPPT_CONV_V:
		About: None
		Arguments: [>B, >u2]
		return values: {'err': '>b'}
		port: 14		subport: 2


CONTROL.SET_ALL_MPPT_CONV_V:
		About: None
		Arguments: [>u2, >u2, >u2, >u2]
		return values: {'err': '>b'}
		port: 14		subport: 3


CONTROL.SET_MODE_MPPT:
		About: None
		Arguments: [>B]
		return values: {'err': '>b'}
		port: 14		subport: 4


CONTROL.SET_AUTO_TIMEOUT_MPPT:
		About: None
		Arguments: [>u4]
		return values: {'err': '>b'}
		port: 14		subport: 5


CONTROL. BATTERY HEATER SET_HEATER_MODE:
		About: Manual, or automatic
		Arguments: [>B]
		return values: {'status': '>b'}
		port: 14		subport: 6


CONTROL.SET_HEATER_STATE:
		About: On, or off
		Arguments: [>B, >u2]
		return values: {'err': '>b'}
		port: 14		subport: 7
